{"version":3,"sources":["store/contact/action.js","store/contact/reducer.js","store/appointment/action.js","store/appointment/reducer.js","store/rootReducer.js","store/contact/saga.js","store/appointment/saga.js","store/rootSaga.js","store/store.js","components/appointment/Appointment.js","components/appointmentList/AppointmentList.js","components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","containers/appointmentsPage/AppointmentsPage.js","components/contact/Contact.js","components/contactList/ContactList.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","routes.js","index.js"],"names":["actionTypes","getContactError","error","type","updateContactSuccess","payload","initContact","contacts","contactTotal","reducer","state","action","getAppointmentError","updateAppointmentSuccess","initappointment","appointments","appointmentTotal","combineReducers","contact","appointment","getContactSaga","addContactSaga","removeContactSaga","clearContactSaga","rootSaga","put","localContact","JSON","parse","localStorage","getItem","currentContact","push","index","findIndex","c","id","splice","length","emptyContact","all","takeEvery","getAppointmentSaga","addAppointmentSaga","removeAppointmentSaga","clearAppointmentSaga","localAppointment","currentAppointment","contactObj","find","parseInt","appoint","appointTotal","emptyAppointment","ContactSaga","AppointmentSaga","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","rootReducer","configureStore","initialState","middleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","sagaTask","run","Appointment","removeAppointment","email","className","title","date","time","Button","variant","onClick","connect","data","dispatch","onRemovePressed","map","ContactPicker","onChange","options","value","name","AppointmentForm","handleSubmit","onSubmit","onClearPressed","onCreatePressed","addAppointment","useState","setAppointment","e","preventDefault","alert","target","reset","tmp","prevState","Contact","removeContact","phone","ContactForm","addContact","setContact","App","ROUTES","to","activeClassName","exact","path","routes","persiststor","persistStore","ReactDOM","render","loading","persistor","document","getElementById"],"mappings":"+XAAaA,EACI,cADJA,EAEY,sBAFZA,EAGU,oBAHVA,EAQI,cARJA,EASO,iBATPA,EAWM,gBAXNA,EAYc,wBAZdA,EAiBe,yBAjBfA,EAkBa,uBAanB,SAASC,EAAgBC,GAC5B,MAAO,CACHC,KAAMH,EACNE,SAaD,SAASE,EAAqBC,GACjC,MAAO,CACHF,KAAMH,EACNK,WChDD,IAAMC,EAAc,CACvBC,SAAU,GACVC,aAAc,GAoCHC,MAjCf,WAA+C,IAA9BC,EAA6B,uDAArBJ,EAAaK,EAAQ,uCAC1C,OAAQA,EAAOR,MACX,KAAKH,EACD,OAAO,eACAU,GAEX,KAAKV,EAML,KAAKA,EACD,OAAO,uCACAU,GACA,CAAEH,SAAUI,EAAON,QAAQE,WAC3B,CAAEC,aAAcG,EAAON,QAAQG,eAE1C,KAAKR,EAKL,KAAKA,EACD,OAAO,2BACAU,GACA,CAAER,MAAOS,EAAOT,QAE3B,QACI,OAAOQ,ICpCNV,EACQ,kBADRA,EAEgB,0BAFhBA,EAGc,wBAHdA,EAQQ,kBARRA,EASW,qBATXA,EAWU,oBAXVA,EAYkB,4BAZlBA,EAiBmB,6BAjBnBA,EAkBiB,2BAavB,SAASY,EAAoBV,GAChC,MAAO,CACHC,KAAMH,EACNE,SAaD,SAASW,EAAyBR,GACrC,MAAO,CACHF,KAAMH,EACNK,WC/CD,IAAMS,EAAkB,CAC3BC,aAAc,GACdC,iBAAkB,GAoCPP,MAjCf,WAAmD,IAAlCC,EAAiC,uDAAzBI,EAAiBH,EAAQ,uCAC9C,OAAQA,EAAOR,MACX,KAAKH,EACD,OAAO,eACAU,GAEX,KAAKV,EAML,KAAKA,EACD,OAAO,uCACAU,GACA,CAAEK,aAAcJ,EAAON,QAAQU,eAC/B,CAAEC,iBAAkBL,EAAON,QAAQW,mBAE9C,KAAKhB,EAKL,KAAKA,EACD,OAAO,2BACAU,GACA,CAAER,MAAOS,EAAOT,QAE3B,QACI,OAAOQ,ICjCJO,cAAgB,CAC3BC,UACAC,gB,kCCGMC,G,WAQAC,G,WAeAC,G,WAmBAC,G,WAYeC,IAtDzB,SAAUJ,IAAV,iEAEI,OAFJ,kBAEUK,YLeC,CACHtB,KAAMH,IKlBd,6BAII,OAJJ,kCAIUyB,YAAIxB,EAAgB,EAAD,KAJ7B,oDAQA,SAAUoB,EAAehB,GAAzB,2EASI,OATJ,SAEYa,EAAYb,EAAZa,QACFQ,EAAeC,KAAKC,MACxBC,aAAaC,QAAQ,yBACrBZ,SACEa,EAAiBJ,KAAKC,MAAMF,IACjBnB,SAASyB,KAAKd,GAC7Ba,EAAevB,eARnB,SASUiB,YAAIrB,EAAqB2B,IATnC,+BAWI,OAXJ,oCAWUN,YAAIxB,EAAgB,EAAD,KAX7B,sDAeA,SAAUqB,EAAkBjB,GAA5B,2EAaI,OAbJ,SAEYa,EAAYb,EAAZa,QACJQ,EAAeC,KAAKC,MACtBD,KAAKC,MAAMC,aAAaC,QAAQ,yBAAyBZ,SAEvDe,EAAQP,EAAanB,SAAS2B,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOlB,EAAQkB,MACpEV,EAAalB,aAAekB,EAAalB,aAAe,EACxDkB,EAAanB,SAAS8B,OAAOJ,EAAO,GACC,IAAjCP,EAAanB,SAAS+B,SACxBZ,EAAanB,SAAW,GACxBmB,EAAalB,aAAe,GAXlC,SAaUiB,YAAIrB,EAAqBsB,IAbnC,+BAeI,OAfJ,oCAeUD,YAAIxB,EAAgB,EAAD,KAf7B,sDAmBA,SAAUsB,IAAV,uEAMI,OANJ,SAEUgB,EAAe,CACnBhC,SAAU,GACVC,aAAc,GAJpB,SAMUiB,YAAIrB,EAAqBmC,IANnC,8BAQI,OARJ,mCAQUd,aLQyBpB,EKRF,EAAD,GLSrB,CACHF,KAAMH,EACNK,aKnBR,kCLgBO,IAA4BA,IKhBnC,gBAYe,SAAUmB,KAAV,iEACb,OADa,SACPgB,YAAI,CAACC,YAAUzC,EAAyBoB,KADjC,OAEb,OAFa,SAEPoB,YAAI,CAACC,YAAUzC,EAAyBqB,KAFjC,OAGb,OAHa,SAGPmB,YAAI,CAACC,YAAUzC,EAA4BsB,KAHpC,OAIb,OAJa,SAIPkB,YAAI,CAACC,YAAUzC,EAA2BuB,KAJnC,OAKb,OALa,UAKPiB,YAAI,CAACC,YAAUzC,EAAmCuB,KAL3C,wC,gBCpDLmB,I,YAQAC,I,YAoBAC,I,YAsBAC,I,YAYerB,IA9DzB,SAAUkB,KAAV,iEAEI,OAFJ,kBAEUjB,YJaC,CACHtB,KAAMH,IIhBd,6BAII,OAJJ,kCAIUyB,YAAIb,EAAoB,EAAD,KAJjC,qDAQA,SAAU+B,GAAmBtC,GAA7B,+EAcI,OAdJ,SAEYc,EAAgBd,EAAhBc,YACF2B,EAAmBnB,KAAKC,MAC5BC,aAAaC,QAAQ,yBACrBX,YACE4B,EAAqBpB,KAAKC,MAAMkB,GAChCpB,EAAeC,KAAKC,MACtBD,KAAKC,MAAMC,aAAaC,QAAQ,yBAAyBZ,SAEvD8B,EAAatB,EAAanB,SAAS0C,MAAK,SAACd,GAAD,OAAOA,EAAEC,KAAOc,SAAS/B,EAAYD,YACjFC,EAAYD,QAAU8B,EACtBD,EAAmBhC,aAAaiB,KAAKb,GACrC4B,EAAmB/B,mBAbvB,UAcUS,YAAIZ,EAAyBkC,IAdvC,gCAgBI,OAhBJ,oCAgBUtB,YAAIb,EAAoB,EAAD,KAhBjC,uDAoBA,SAAUgC,GAAsBvC,GAAhC,2EAeI,OAfJ,SAEYc,EAAgBd,EAAhBc,YACJ2B,EAAmBnB,KAAKC,MAC1BD,KAAKC,MAAMC,aAAaC,QAAQ,yBAAyBX,aAEvDc,EAAQa,EAAiB/B,aAAamB,WACxC,SAACiB,GAAD,OAAaA,EAAQf,KAAOjB,EAAYiB,MAE1CU,EAAiBM,aAAeN,EAAiBM,aAAe,EAChEN,EAAiB/B,aAAasB,OAAOJ,EAAO,GACC,IAAzCa,EAAiB/B,aAAauB,SAChCQ,EAAiB/B,aAAe,GAChC+B,EAAiBM,aAAe,GAbtC,SAeU3B,YAAIZ,EAAyBiC,IAfvC,+BAiBI,OAjBJ,oCAiBUrB,YAAIb,EAAoB,EAAD,KAjBjC,uDAsBA,SAAUiC,KAAV,uEAMI,OANJ,SAEUQ,EAAmB,CACvBtC,aAAc,GACdC,iBAAkB,GAJxB,SAMUS,YAAIZ,EAAyBwC,IANvC,8BAQI,OARJ,mCAQU5B,aJF6BpB,EIEF,EAAD,GJDzB,CACHF,KAAMH,EACNK,aITR,kCJMO,IAAgCA,IINvC,iBAYe,SAAUmB,KAAV,iEACb,OADa,SACPgB,YAAI,CAACC,YAAUzC,EAA6B0C,MADrC,OAEb,OAFa,SAEPF,YAAI,CAACC,YAAUzC,EAA6B2C,MAFrC,OAGb,OAHa,SAGPH,YAAI,CAACC,YAAUzC,EAAgC4C,MAHxC,OAIb,OAJa,SAIPJ,YAAI,CAACC,YAAUzC,EAA+B6C,MAJvC,wC,gBCrEUrB,IAAV,SAAUA,KAAV,iEACX,OADW,SACLgB,YAAI,CACNc,KACAC,OAHO,wCCGf,IAQMC,GAAgB,CAClBC,IAAK,eACLC,YACAC,UAAW,CAAC,UAAW,gBAGrBC,GAAmBC,YAAeL,GAAeM,GAcxCC,OAZf,SAAwBC,GACpB,IAjBmBC,EAiBbC,EAAiBC,cACjBC,EAAQC,YACVT,GACAI,GApBeC,EAqBA,CAACC,GAhBbI,IAAe,WAAf,cAAmBL,MAoB1B,OADAG,EAAMG,SAAWL,EAAeM,IAAIhD,IAC7B4C,G,oEC7BEK,GAAc,SAAC,GAAuC,IAArCtD,EAAoC,EAApCA,YAAYuD,EAAwB,EAAxBA,kBAC/BC,EAASxD,EAAYD,QAArByD,MACT,OACE,uBAAKC,UAAU,wBAAf,UACE,uBAAKA,UAAU,UAAf,UACA,8BAAKzD,EAAY0D,QACjB,8BAAKF,IACL,gCAAKxD,EAAY2D,KAAjB,MAA0B3D,EAAY4D,WAEtC,eAACC,GAAA,EAAD,CAAQC,QAAQ,SAASL,UAAU,WAAWM,QAAS,kBAAMR,EAAkBvD,IAA/E,mBCSSgE,I,MAAAA,aANS,SAACzE,GAAD,MAAY,CAClC0E,KAAM1E,EAAMS,gBAEa,SAACkE,GAAD,MAAe,CACxCC,gBAAiB,SAACnE,GAAD,OAAiBkE,ERuB7B,SAA2BlE,GAC9B,MAAO,CAAEhB,KAAMH,EAAgCmB,eQxBNuD,CAAkBvD,QAEhDgE,EAhBU,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAME,EAAsB,EAAtBA,gBACxBvE,EAAiBqE,EAAjBrE,aACR,OACE,sBAAK6D,UAAU,0BAAf,SACG7D,EAAawE,KAAI,SAACpE,GAAD,OAChB,eAAC,GAAD,CAAaA,YAAaA,EAAauD,kBAAmBY,aCInDE,GAbO,SAAC,GAA4B,IAA1BjF,EAAyB,EAAzBA,SAAUkF,EAAe,EAAfA,SAC3BC,EAAUnF,EAASgF,KAAI,SAACrE,GAAD,OAC3B,yBAAQyE,MAAOzE,EAAQkB,GAAvB,SAA4BlB,EAAQ0E,UAGtC,OACE,0BAAQH,SAAUA,EAAUG,KAAK,UAAjC,UACE,yBAAQD,MAAO,EAAf,uBACCD,MCPMG,GAAkB,SAAC,GAA0C,IAAxCJ,EAAuC,EAAvCA,SAAUlF,EAA6B,EAA7BA,SAAUuF,EAAmB,EAAnBA,aAGpD,OACE,wBAAMC,SAAUD,EAAhB,UACE,uBAAKlB,UAAU,aAAf,UACE,2CACA,wBAAOzE,KAAK,OAAOyF,KAAK,QAAQH,SAAUA,OAE5C,uBAAKb,UAAU,aAAf,UACE,6CACA,eAAC,GAAD,CAAegB,KAAK,UAAUrF,SAAUA,EAAUkF,SAAUA,OAE9D,uBAAKb,UAAU,aAAf,UACE,0CACA,wBAAOzE,KAAK,OAAOyF,KAAK,OAAOH,SAAUA,OAE3C,uBAAKb,UAAU,aAAf,UACE,0CACA,wBAAOzE,KAAK,OAAOyF,KAAK,OAAOH,SAAUA,OAE3C,wBAAOtF,KAAK,SAASwF,MAAM,YC2DlBR,I,MAAAA,aARS,SAACzE,GAAD,MAAY,CAClC0E,KAAM1E,EAAMS,YACZZ,SAAUG,EAAMQ,QAAQX,aAEC,SAAC8E,GAAD,MAAe,CACxCW,eAAgB,kBAAMX,EXlBb,CACHlF,KAAMH,EACNK,YAHD,IAA0BA,GWoB/B4F,gBAAiB,SAAC9E,GAAD,OAAiBkE,EX1C7B,SAAwBlE,GAC3B,MAAO,CAAEhB,KAAMH,EAA6BmB,eWyCH+E,CAAe/E,QAE7CgE,EAxEU,SAAC,GAKnB,IAJLC,EAII,EAJJA,KACA7E,EAGI,EAHJA,SACA0F,EAEI,EAFJA,gBACAD,EACI,EADJA,eAOA,EAAsCG,mBAAS,IAA/C,oBAAOhF,EAAP,KAAoBiF,EAApB,KA4BA,OACE,uBAAKxB,UAAU,cAAf,UACE,2BAASA,UAAU,WAAnB,UACE,kDACA,wBACA,eAAC,GAAD,CACErE,SAAUA,EACVuF,aAlCa,SAACO,GAEpB,GADAA,EAAEC,kBAECnF,EAAY0D,QACZ1D,EAAYD,UACZC,EAAY2D,OACZ3D,EAAY4D,KAEb,OAAOwB,MAAM,mCACfF,EAAEG,OAAOC,QACT,IAAIC,EAAMvF,EACVuF,EAAItE,GAAKgD,EAAKpE,iBAAmB,EACjCiF,EAAgBS,GAChBN,EAAe,KAsBTX,SAfS,SAACY,GAChBD,GAAe,SAACO,GAAD,mBAAC,eACXA,GADU,mBAEZN,EAAEG,OAAOZ,KAAOS,EAAEG,OAAOb,iBAe1B,2BAASf,UAAU,WAAnB,UACE,uBAAKA,UAAU,sBAAf,UACE,+CACA,eAACI,GAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,kBAAMc,KAAxC,0BAIF,wBACA,eAAC,GAAD,cCjEKY,I,MAAU,SAAC,GAA+B,IAA7B1F,EAA4B,EAA5BA,QAAQ2F,EAAoB,EAApBA,cAChC,OACE,uBAAKjC,UAAU,oBAAf,UACE,uBAAKA,UAAU,UAAf,UACA,8BAAK1D,EAAQ0E,OACb,8BAAK1E,EAAQyD,QACb,8BAAKzD,EAAQ4F,WAEb,eAAC9B,GAAA,EAAD,CAAQC,QAAQ,SAASL,UAAU,WAAWM,QAAS,kBAAM2B,EAAc3F,IAA3E,oBCUSiE,I,MAAAA,aANS,SAACzE,GAAD,MAAY,CAClC0E,KAAM1E,EAAMQ,YAEa,SAACmE,GAAD,MAAe,CACxCC,gBAAiB,SAACpE,GAAD,OAAamE,EfuBzB,SAAuBnE,GAC1B,MAAO,CAAEf,KAAMH,EAA4BkB,WexBN2F,CAAc3F,QAExCiE,EAhBK,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAME,EAAsB,EAAtBA,gBACnB/E,EAAa6E,EAAb7E,SACR,OACE,sBAAKqE,UAAU,sBAAf,SACGrE,EAASgF,KAAI,SAACrE,GAAD,OACZ,eAAC,GAAD,CAASA,QAASA,EAAS2F,cAAevB,aCRrCyB,GAAc,SAAC,GAGrB,IAFLtB,EAEI,EAFJA,SACAK,EACI,EADJA,aAEA,OACE,wBAAMC,SAAUD,EAAhB,UACE,uBAAKlB,UAAU,aAAf,UACA,0CACA,wBAAOzE,KAAK,OAAOyF,KAAK,OAAOH,SAAUA,OAEzC,uBAAKb,UAAU,aAAf,UACA,2CACA,wBAAOzE,KAAK,MAAMyF,KAAK,QAAQH,SAAUA,OAEzC,uBAAKb,UAAU,aAAf,UACA,2CACA,wBAAOzE,KAAK,QAAQyF,KAAK,QAAQH,SAAUA,OAE3C,wBAAOtF,KAAK,SAASwF,MAAM,YCmDlBR,I,MAAAA,aAPS,SAACzE,GAAD,MAAY,CAClCH,SAAUG,EAAMQ,YAES,SAACmE,GAAD,MAAe,CACxCW,eAAgB,kBAAMX,EjBbb,CACHlF,KAAMH,EACNK,YAHD,IAAsBA,GiBe3B4F,gBAAiB,SAAC/E,GAAD,OAAamE,EjB/BzB,SAAoBnE,GACvB,MAAO,CAAEf,KAAMH,EAAyBkB,WiB8BH8F,CAAW9F,QAErCiE,EAhEM,SAAC,GAAmD,IAAjD5E,EAAgD,EAAhDA,SAAU0F,EAAsC,EAAtCA,gBAAiBD,EAAqB,EAArBA,eAMjD,EAA8BG,mBAAS,IAAvC,oBAAOjF,EAAP,KAAgB+F,EAAhB,KA8BA,OACE,uBAAKrC,UAAU,cAAf,UACE,2BAASA,UAAU,WAAnB,UACE,8CACA,wBACA,eAAC,GAAD,CAAakB,aAlCE,SAACO,GACpBA,EAAEC,iBACFD,EAAEG,OAAOC,QACT,IAAIC,EAAMxF,EACV,OAAKA,EAAQ0E,MAAS1E,EAAQ4F,OAAU5F,EAAQyD,MAEpCpE,EAASA,SAAS0C,MAC5B,SAACd,GAAD,OACEA,EAAE2E,QAAU5F,EAAQ4F,OACpB3E,EAAEwC,QAAUzD,EAAQyD,OACpBxC,EAAEyD,OAAS1E,EAAQ0E,QAELW,MAAM,kBACxBG,EAAItE,GAAK7B,EAASC,aAAe,EACjCyF,EAAgBS,QAChBO,EAAW,KAVFV,MAAM,uBA6B8Bd,SAZ9B,SAACY,GAChBY,GAAW,SAACN,GAAD,mBAAC,eACPA,GADM,mBAERN,EAAEG,OAAOZ,KAAOS,EAAEG,OAAOb,iBAW1B,2BAASf,UAAU,WAAnB,UACE,uBAAKA,UAAU,kBAAf,UACE,2CACA,eAACI,GAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS,kBAAMc,KAAxC,0BAIF,wBACA,eAAC,GAAD,cCPOkB,OA7Cf,WAME,IAAMC,EACM,YADNA,EAEU,gBAQhB,OACE,uCACE,iCACE,eAAC,KAAD,CAASC,GAAID,EAAiBvC,UAAU,OAAOyC,gBAAgB,SAA/D,sBAGA,eAAC,KAAD,CAASD,GAAID,EAAqBvC,UAAU,OAAQyC,gBAAgB,SAApE,6BAIF,gCACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,eAAC,KAAD,CAAUH,GAAID,MAEhB,eAAC,KAAD,CAAOI,KAAMJ,EAAb,SAEE,eAAC,GAAD,MAEF,eAAC,KAAD,CAAOI,KAAMJ,EAAb,SAEE,eAAC,GAAD,eCjCGK,GALb,eAAC,KAAD,UACE,eAAC,GAAD,MCGEpD,GAAQL,GADO,IAEf0D,GAAcC,YAAatD,IACjCuD,IAASC,OACP,eAAC,IAAD,CAAUxD,MAAOA,GAAjB,SACE,eAAC,cAAD,CAAayD,QAAS,8CAAuBC,UAAWL,GAAxD,SACED,OAGJO,SAASC,eAAe,W","file":"static/js/main.8fec97c9.chunk.js","sourcesContent":["export const actionTypes = {\n    GET_CONTACT: 'GET_CONTACT',\n    GET_CONTACT_SUCCESS: 'GET_CONTACT_SUCCESS',\n    GET_CONTACT_ERROR: 'GET_CONTACT_ERROR',\n\n    GET_CONTACT_TOTAL: 'GET_CONTACT_TOTAL',\n    GET_CONTACT_TOTAL_SUCCESS: 'GET_CONTACT_TOTAL_SUCCESS',\n\n    ADD_CONTACT: 'ADD_CONTACT',\n    REMOVE_CONTACT: 'REMOVE_CONTACT',\n\n    CLEAR_CONTACT: 'CLEAR_CONTACT',\n    CLEAR_CONTACT_SUCCESS: 'CLEAR_CONTACT_SUCCESS',\n    CLEAR_CONTACT_ERROR: 'CLEAR_CONTACT_ERROR',\n\n    \n    UPDATE_CONTACT: 'UPDATE_CONTACT',\n    UPDATE_CONTACT_SUCCESS: 'UPDATE_CONTACT_SUCCESS',\n    UPDATE_CONTACT_ERROR: 'UPDATE_CONTACT_ERROR',\n};\n\nexport function getContact() {\n    return { type: actionTypes.GET_CONTACT };\n}\n\nexport function getContactSuccess() {\n    return {\n        type: actionTypes.GET_CONTACT_SUCCESS,\n    };\n}\n\nexport function getContactError(error) {\n    return {\n        type: actionTypes.GET_CONTACT_ERROR,\n        error,\n    };\n}\n\nexport function addContact(contact) {\n    return { type: actionTypes.ADD_CONTACT, contact };\n}\n\nexport function removeContact(contact) {\n    return { type: actionTypes.REMOVE_CONTACT, contact };\n}\n\n\nexport function updateContactSuccess(payload) {\n    return {\n        type: actionTypes.UPDATE_CONTACT_SUCCESS,\n        payload,\n    };\n}\n\nexport function clearContact(payload) {\n    return {\n        type: actionTypes.CLEAR_CONTACT,\n        payload,\n    };\n}\nexport function clearContactSuccess(payload) {\n    return {\n        type: actionTypes.CLEAR_CONTACT_SUCCESS,\n        payload,\n    };\n}\n\nexport function updateContactError(payload) {\n    return {\n        type: actionTypes.UPDATE_CONTACT_ERROR,\n        payload,\n    };\n}\n","import { actionTypes } from './action';\n\nexport const initContact = {\n    contacts: [],\n    contactTotal: 0,\n};\n\nfunction reducer(state = initContact, action) {\n    switch (action.type) {\n        case actionTypes.GET_CONTACT_SUCCESS:\n            return {\n                ...state,\n            };\n        case actionTypes.UPDATE_CONTACT_SUCCESS:\n            return {\n                ...state,\n                ...{ contacts: action.payload.contacts },\n                ...{ contactTotal: action.payload.contactTotal },\n            };\n        case actionTypes.CLEAR_CONTACT_SUCCESS:\n            return {\n                ...state,\n                ...{ contacts: action.payload.contacts },\n                ...{ contactTotal: action.payload.contactTotal },\n            };\n        case actionTypes.GET_CONTACT_ERROR:\n            return {\n                ...state,\n                ...{ error: action.error },\n            };\n        case actionTypes.UPDATE_CONTACT_ERROR:\n            return {\n                ...state,\n                ...{ error: action.error },\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","export const actionTypes = {\n    GET_APPOINTMENT: 'GET_APPOINTMENT',\n    GET_APPOINTMENT_SUCCESS: 'GET_APPOINTMENT_SUCCESS',\n    GET_APPOINTMENT_ERROR: 'GET_APPOINTMENT_ERROR',\n\n    GET_APPOINTMENT_TOTAL: 'GET_APPOINTMENT_TOTAL',\n    GET_APPOINTMENT_TOTAL_SUCCESS: 'GET_APPOINTMENT_TOTAL_SUCCESS',\n\n    ADD_APPOINTMENT: 'ADD_APPOINTMENT',\n    REMOVE_APPOINTMENT: 'REMOVE_APPOINTMENT',\n\n    CLEAR_APPOINTMENT: 'CLEAR_APPOINTMENT',\n    CLEAR_APPOINTMENT_SUCCESS: 'CLEAR_APPOINTMENT_SUCCESS',\n    CLEAR_APPOINTMENT_ERROR: 'CLEAR_APPOINTMENT_ERROR',\n\n    \n    UPDATE_APPOINTMENT: 'UPDATE_APPOINTMENT',\n    UPDATE_APPOINTMENT_SUCCESS: 'UPDATE_APPOINTMENT_SUCCESS',\n    UPDATE_APPOINTMENT_ERROR: 'UPDATE_APPOINTMENT_ERROR',\n};\n\nexport function getAppointment() {\n    return { type: actionTypes.GET_APPOINTMENT };\n}\n\nexport function getAppointmentSuccess() {\n    return {\n        type: actionTypes.GET_APPOINTMENT_SUCCESS,\n    };\n}\n\nexport function getAppointmentError(error) {\n    return {\n        type: actionTypes.GET_APPOINTMENT_ERROR,\n        error,\n    };\n}\n\nexport function addAppointment(appointment) {\n    return { type: actionTypes.ADD_APPOINTMENT, appointment };\n}\n\nexport function removeAppointment(appointment) {\n    return { type: actionTypes.REMOVE_APPOINTMENT, appointment };\n}\n\n\nexport function updateAppointmentSuccess(payload) {\n    return {\n        type: actionTypes.UPDATE_APPOINTMENT_SUCCESS,\n        payload,\n    };\n}\n\nexport function clearAppointmentSuccess(payload) {\n    return {\n        type: actionTypes.CLEAR_APPOINTMENT_SUCCESS,\n        payload,\n    };\n}\nexport function clearAppointment(payload) {\n    return {\n        type: actionTypes.CLEAR_APPOINTMENT,\n        payload,\n    };\n}\n\nexport function updateAppointmentError(payload) {\n    return {\n        type: actionTypes.UPDATE_APPOINTMENT_ERROR,\n        payload,\n    };\n}\n","\nimport { actionTypes } from './action';\n\nexport const initappointment = {\n    appointments: [],\n    appointmentTotal: 0,\n};\n\nfunction reducer(state = initappointment, action) {\n    switch (action.type) {\n        case actionTypes.GET_APPOINTMENT_SUCCESS:\n            return {\n                ...state,\n            };\n        case actionTypes.UPDATE_APPOINTMENT_SUCCESS:\n            return {\n                ...state,\n                ...{ appointments: action.payload.appointments },\n                ...{ appointmentTotal: action.payload.appointmentTotal },\n            };\n        case actionTypes.CLEAR_APPOINTMENT_SUCCESS:\n            return {\n                ...state,\n                ...{ appointments: action.payload.appointments },\n                ...{ appointmentTotal: action.payload.appointmentTotal },\n            };\n        case actionTypes.GET_APPOINTMENT_ERROR:\n            return {\n                ...state,\n                ...{ error: action.error },\n            };\n        case actionTypes.UPDATE_APPOINTMENT_ERROR:\n            return {\n                ...state,\n                ...{ error: action.error },\n            };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport contact from './contact/reducer';\nimport appointment from './appointment/reducer';\n\nexport default combineReducers({\n    contact,\n    appointment\n});\n","import { all, put, takeEvery } from \"redux-saga/effects\";\nimport {\n  actionTypes,\n  getContactError,\n  getContactSuccess,\n  updateContactSuccess,\n  updateContactError,\n} from \"./action\";\n\nfunction* getContactSaga() {\n  try {\n    yield put(getContactSuccess());\n  } catch (err) {\n    yield put(getContactError(err));\n  }\n}\n\nfunction* addContactSaga(payload) {\n  try {\n    const { contact } = payload;\n    const localContact = JSON.parse(\n      localStorage.getItem(\"persist:Appointments\")\n    ).contact;\n    let currentContact = JSON.parse(localContact);\n    currentContact.contacts.push(contact);\n    currentContact.contactTotal++;\n    yield put(updateContactSuccess(currentContact));\n  } catch (err) {\n    yield put(getContactError(err));\n  }\n}\n\nfunction* removeContactSaga(payload) {\n  try {\n    const { contact } = payload;\n    let localContact = JSON.parse(\n      JSON.parse(localStorage.getItem(\"persist:Appointments\")).contact\n    );\n    let index = localContact.contacts.findIndex((c) => c.id === contact.id);\n    localContact.contactTotal = localContact.contactTotal - 1;\n    localContact.contacts.splice(index, 1);\n    if (localContact.contacts.length === 0) {\n      localContact.contacts = [];\n      localContact.contactTotal = 0;\n    }\n    yield put(updateContactSuccess(localContact));\n  } catch (err) {\n    yield put(getContactError(err));\n  }\n}\n\nfunction* clearContactSaga() {\n  try {\n    const emptyContact = {\n      contacts: [],\n      contactTotal: 0,\n    };\n    yield put(updateContactSuccess(emptyContact));\n  } catch (err) {\n    yield put(updateContactError(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_CONTACT, getContactSaga)]);\n  yield all([takeEvery(actionTypes.ADD_CONTACT, addContactSaga)]);\n  yield all([takeEvery(actionTypes.REMOVE_CONTACT, removeContactSaga)]);\n  yield all([takeEvery(actionTypes.CLEAR_CONTACT, clearContactSaga)]);\n  yield all([takeEvery(actionTypes.CLEAR_CONTACT_SUCCESS, clearContactSaga)]);\n}\n","import { all, put, takeEvery } from \"redux-saga/effects\";\n\nimport {\n  actionTypes,\n  getAppointmentError,\n  getAppointmentSuccess,\n  updateAppointmentSuccess,\n  updateAppointmentError,\n} from \"./action\";\n\n\nfunction* getAppointmentSaga() {\n  try {\n    yield put(getAppointmentSuccess());\n  } catch (err) {\n    yield put(getAppointmentError(err));\n  }\n}\n\nfunction* addAppointmentSaga(payload) {\n  try {\n    const { appointment } = payload;\n    const localAppointment = JSON.parse(\n      localStorage.getItem(\"persist:Appointments\")\n    ).appointment;\n    let currentAppointment = JSON.parse(localAppointment);\n    let localContact = JSON.parse(\n      JSON.parse(localStorage.getItem(\"persist:Appointments\")).contact\n    );\n    let contactObj = localContact.contacts.find((c) => c.id === parseInt(appointment.contact));\n    appointment.contact = contactObj;\n    currentAppointment.appointments.push(appointment);\n    currentAppointment.appointmentTotal++;\n    yield put(updateAppointmentSuccess(currentAppointment));\n  } catch (err) {\n    yield put(getAppointmentError(err));\n  }\n}\n\nfunction* removeAppointmentSaga(payload) {\n  try {\n    const { appointment } = payload;\n    let localAppointment = JSON.parse(\n      JSON.parse(localStorage.getItem(\"persist:Appointments\")).appointment\n    );\n    let index = localAppointment.appointments.findIndex(\n      (appoint) => appoint.id === appointment.id\n    );\n    localAppointment.appointTotal = localAppointment.appointTotal - 1;\n    localAppointment.appointments.splice(index, 1);\n    if (localAppointment.appointments.length === 0) {\n      localAppointment.appointments = [];\n      localAppointment.appointTotal = 0;\n    }\n    yield put(updateAppointmentSuccess(localAppointment));\n  } catch (err) {\n    yield put(getAppointmentError(err));\n  }\n}\n\n\nfunction* clearAppointmentSaga() {\n  try {\n    const emptyAppointment = {\n      appointments: [],\n      appointmentTotal: 0,\n    };\n    yield put(updateAppointmentSuccess(emptyAppointment));\n  } catch (err) {\n    yield put(updateAppointmentError(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_APPOINTMENT, getAppointmentSaga)]);\n  yield all([takeEvery(actionTypes.ADD_APPOINTMENT, addAppointmentSaga)]);\n  yield all([takeEvery(actionTypes.REMOVE_APPOINTMENT, removeAppointmentSaga)]);\n  yield all([takeEvery(actionTypes.CLEAR_APPOINTMENT, clearAppointmentSaga)]);\n}\n","import { all } from 'redux-saga/effects';\nimport ContactSaga from './contact/saga';\nimport AppointmentSaga from './appointment/saga';\n\nexport default function* rootSaga() {\n    yield all([\n        ContactSaga(),\n        AppointmentSaga(),\n    ]);\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst bindMiddleware = middleware => {\n    if (process.env.NODE_ENV !== 'production') {\n        const { composeWithDevTools } = require('redux-devtools-extension');\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n    return applyMiddleware(...middleware);\n};\n\nconst persistConfig = {\n    key: 'Appointments',\n    storage,\n    whitelist: ['contact', 'appointment'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(\n        persistedReducer,\n        initialState,\n        bindMiddleware([sagaMiddleware])\n    );\n\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nexport default configureStore;\n","import React from \"react\";\nimport \"./Appointment.css\"\nimport { Button } from 'react-bootstrap';\nexport const Appointment = ({ appointment,removeAppointment }) => {\n    const {email} = appointment.contact\n  return (\n    <div className=\"appointment-container\">\n      <div className=\"section\">\n      <h2>{appointment.title}</h2>\n      <h4>{email}</h4>\n      <h5>{appointment.date} | {appointment.time}</h5>\n      </div>\n      <Button variant=\"danger\" className=\"col-md-1\" onClick={() => removeAppointment(appointment)}>X</Button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Appointment } from \"../appointment/Appointment\";\nimport { removeAppointment } from \"../../store/appointment/action\";\nimport { connect } from 'react-redux';\nimport \"./AppointmentList.css\"\nconst ApppointmentList = ({ data, onRemovePressed }) => {\n  const { appointments } = data;\n  return (\n    <div className=\"appointment-list-header\">\n      {appointments.map((appointment) => (\n        <Appointment appointment={appointment} removeAppointment={onRemovePressed} />\n      ))}\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({\n  data: state.appointment,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  onRemovePressed: (appointment) => dispatch(removeAppointment(appointment)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ApppointmentList);\n","import React from \"react\";\r\nconst ContactPicker = ({ contacts, onChange }) => {\r\n  const options = contacts.map((contact) => (\r\n    <option value={contact.id}>{contact.name}</option>\r\n  ));\r\n\r\n  return (\r\n    <select onChange={onChange} name=\"contact\">\r\n      <option value={0}>Select...</option>\r\n      {options}\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default ContactPicker;\r\n","import React from \"react\";\r\nimport ContactPicker from \"../contactPicker/ContactPicker\";\r\nexport const AppointmentForm = ({ onChange, contacts, handleSubmit }) => {\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label>Title</label>\r\n        <input type=\"text\" name=\"title\" onChange={onChange} />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Contact</label>\r\n        <ContactPicker name=\"contact\" contacts={contacts} onChange={onChange} />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Date</label>\r\n        <input type=\"date\" name=\"date\" onChange={onChange} />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label>Time</label>\r\n        <input type=\"time\" name=\"time\" onChange={onChange} />\r\n      </div>\r\n      <input type=\"submit\" value=\"ADD\" />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  addAppointment,\r\n  clearAppointment,\r\n} from \"../../store/appointment/action\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport AppointmentList from \"../../components/appointmentList/AppointmentList\";\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport \"./AppointmentsPage.css\";\r\nconst AppointmentsPage = ({\r\n  data,\r\n  contacts,\r\n  onCreatePressed,\r\n  onClearPressed,\r\n}) => {\r\n  /*\r\n  Define state variables for \r\n  appointment info and duplicate check\r\n  */\r\n\r\n  const [appointment, setAppointment] = useState({});\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      !appointment.title ||\r\n      !appointment.contact ||\r\n      !appointment.date ||\r\n      !appointment.time\r\n    )\r\n      return alert(\"Please fill all required fields\");\r\n    e.target.reset();\r\n    let tmp = appointment;\r\n    tmp.id = data.appointmentTotal + 1;\r\n    onCreatePressed(tmp);\r\n    setAppointment({});\r\n    /*\r\n    Add appointment info and clear data\r\n    if the appointment name is not a duplicate\r\n    */\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setAppointment((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"content row\">\r\n      <section className=\"col-md-4\">\r\n        <h1>Add Appointment</h1>\r\n        <hr />\r\n        <AppointmentForm\r\n          contacts={contacts}\r\n          handleSubmit={handleSubmit}\r\n          onChange={onChange}\r\n        />\r\n      </section>\r\n      <section className=\"col-md-4\">\r\n        <div className=\"appointments-header\">\r\n          <h1>Appointments</h1>\r\n          <Button variant=\"danger\" onClick={() => onClearPressed()}>\r\n            Clear All\r\n          </Button>\r\n        </div>\r\n        <hr />\r\n        <AppointmentList />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  data: state.appointment,\r\n  contacts: state.contact.contacts,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onClearPressed: () => dispatch(clearAppointment()),\r\n  onCreatePressed: (appointment) => dispatch(addAppointment(appointment)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppointmentsPage);\r\n","import React from \"react\";\r\nimport \"./Contact.css\"\r\nimport { Button } from 'react-bootstrap';\r\nexport const Contact = ({ contact,removeContact }) => {\r\n  return (\r\n    <div className=\"contact-container\">\r\n      <div className=\"section\">\r\n      <h2>{contact.name}</h2>\r\n      <h4>{contact.email}</h4>\r\n      <h5>{contact.phone}</h5>\r\n      </div>\r\n      <Button variant=\"danger\" className=\"col-md-1\" onClick={() => removeContact(contact)}>X</Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Contact } from \"../contact/Contact\";\r\nimport { removeContact } from \"../../store/contact/action\";\r\nimport { connect } from 'react-redux';\r\nimport \"./ContactList.css\"\r\nconst ContactList = ({ data, onRemovePressed }) => {\r\n  const { contacts } = data;\r\n  return (\r\n    <div className=\"contact-list-header\">\r\n      {contacts.map((contact) => (\r\n        <Contact contact={contact} removeContact={onRemovePressed} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  data: state.contact,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onRemovePressed: (contact) => dispatch(removeContact(contact)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  onChange,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" onChange={onChange}/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n      <label>Phone</label>\r\n      <input type=\"tel\" name=\"phone\" onChange={onChange}/>\r\n      </div>\r\n      <div className=\"form-group\">\r\n      <label>Email</label>\r\n      <input type=\"email\" name=\"email\" onChange={onChange}/>\r\n      </div>\r\n      <input type=\"submit\" value=\"ADD\"/>\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { addContact, clearContact } from \"../../store/contact/action\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport ContactList from \"../../components/contactList/ContactList\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport \"./contactsPage.css\";\r\nconst ContactsPage = ({ contacts, onCreatePressed, onClearPressed }) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [contact, setContact] = useState({});\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    e.target.reset();\r\n    let tmp = contact;\r\n    if (!contact.name || !contact.phone || !contact.email)\r\n      return alert(\"Please add contact\");\r\n    let index = contacts.contacts.find(\r\n      (c) =>\r\n        c.phone === contact.phone ||\r\n        c.email === contact.email ||\r\n        c.name === contact.name\r\n    );\r\n    if (index) return alert(\"Already Exist\");\r\n    tmp.id = contacts.contactTotal + 1;\r\n    onCreatePressed(tmp);\r\n    setContact({});\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setContact((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"content row\">\r\n      <section className=\"col-md-4\">\r\n        <h1>Add Contact</h1>\r\n        <hr />\r\n        <ContactForm handleSubmit={handleSubmit} onChange={onChange} />\r\n      </section>\r\n      <section className=\"col-md-4\">\r\n        <div className=\"contacts-header\">\r\n          <h1>Contacts</h1>\r\n          <Button variant=\"danger\" onClick={() => onClearPressed()}>\r\n            Clear All\r\n          </Button>\r\n        </div>\r\n        <hr />\r\n        <ContactList />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contact,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onClearPressed: () => dispatch(clearContact()),\r\n  onCreatePressed: (contact) => dispatch(addContact(contact)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsPage);\r\n","import React from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\nimport \"./App.css\"\r\nimport AppointmentsPage from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport ContactsPage from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  /*\r\n  Define state variables for \r\n  contacts and appointments \r\n  */\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  /*\r\n  Implement functions to add data to\r\n  contacts and appointments\r\n  */\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} className=\"link\" activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} className=\"link\"  activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst routes =(\n  <Router>\n    <App />\n  </Router>\n);\n\nexport default routes;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { persistStore } from \"redux-persist\";\r\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\r\nimport configureStore from './store/store';\r\nimport routes from './routes'\r\nconst initialState = {};\r\nconst store = configureStore(initialState);\r\nconst persiststor = persistStore(store);\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={<div>Loading...</div>} persistor={persiststor}>\r\n     {routes}\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}